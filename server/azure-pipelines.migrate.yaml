trigger: none

pr:
  autoCancel: true
  branches:
    include: [master]
  paths:
    include: [server/azure-pipelines.migrate.yaml, data/*]

pool:
  vmImage: ubuntu-latest

steps:
  - task: UseDotNet@2
    displayName: use latest dotnet sdk
    inputs:
      version: 3.x

  - task: CmdLine@2
    displayName: install ef dotnet tool
    inputs:
      script: dotnet tool install -g dotnet-ef

  # TODO: remove $(System.PullRequest.PullRequestNumber) migration if it already exists

  - task: CmdLine@2
    displayName: add migration
    inputs:
      workingDirectory: server/src
      script: dotnet ef migrations add $(System.PullRequest.PullRequestNumber) -p FilterLists.Data.Migrations -s FilterLists.Api

  - task: DockerCompose@0
    displayName: build test-data
    inputs:
      dockerComposeFile: docker-compose.data.tests.yml
      dockerComposeCommand: build api
    enabled: false

  - task: Docker@2
    displayName: create volume test-data-results
    inputs:
      command: volume
      arguments: create test-data-results
    enabled: false

  - task: DockerCompose@0
    displayName: up test-data db
    inputs:
      dockerComposeFile: docker-compose.data.tests.yml
      dockerComposeCommand: up -d mariadb
    enabled: false

  - task: DockerCompose@0
    displayName: run test-data
    inputs:
      dockerComposeFile: docker-compose.data.tests.yml
      dockerComposeCommand: run api
    enabled: false

  - task: Docker@2
    displayName: create container test-data-results
    inputs:
      command: container
      arguments: create --name test-data-results -v test-data-results:/results hello-world
    condition: succeededOrFailed()
    enabled: false

  - task: Docker@2
    displayName: copy out test-data results
    inputs:
      command: cp
      arguments: test-data-results:/results $(System.DefaultWorkingDirectory)
    condition: succeededOrFailed()
    enabled: false

  - task: PublishTestResults@2
    displayName: publish test results
    inputs:
      testResultsFormat: VSTest
      testResultsFiles: "**/*.trx"
    condition: succeededOrFailed()
    enabled: false

  - task: CmdLine@2
    displayName: git config
    inputs:
      script: git config --global user.email $(GitHub Email) && git config --global user.name $(GitHub UserName)
    enabled: false

  - task: CmdLine@2
    displayName: git add
    inputs:
      script: git add .
    enabled: false

  - task: CmdLine@2
    displayName: git commit
    inputs:
      script: git commit -m "migrate"
    enabled: false

  - task: Bash@3
    env:
      GitHubPat: $(GitHub Personal Access Token)
      RepositoryUri: $(Build.Repository.Uri)
      SourceBranch: $(Build.SourceBranch)
    inputs:
      displayName: git push
      targetType: "inline"
      script: "git push HEAD: HEAD:$SOURCEBRANCH"
      # script: "git push $REPOSITORYURI HEAD:$SOURCEBRANCH"
      # script: "git push -q https://$GITHUBPAT@${$REPOSITORYURI:8} HEAD:$SOURCEBRANCH"
    enabled: false

  - script: |
      git config user.email $(GitHub Email)
      git config user.name $(GitHub UserName)
      git diff
      git  add .
      git commit -m "migrate"
      git push origin HEAD:$(Build.SourceBranch)
    displayName: git push
